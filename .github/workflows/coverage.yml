name: Code Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: pictyping_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Pictyping.sln

    - name: Build solution
      run: dotnet build Pictyping.sln --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test Pictyping.sln \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger "trx;LogFileName=test-results.trx" \
          --settings coverlet.runsettings
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=pictyping_test;Username=postgres;Password=postgres"
        ConnectionStrings__Redis: "localhost:6379"
        Jwt__Key: "ThisIsASecretKeyForJwtTokenGenerationThatIsAtLeast32CharactersLongForTesting"
        Jwt__Issuer: "Pictyping"
        Jwt__Audience: "PictypingUsers"
        Jwt__ExpiryMinutes: "60"

    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.cobertura.xml" \
          -targetdir:"./coverage-report" \
          -reporttypes:"Html;Cobertura;JsonSummary;Badges"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: 5monkeys/cobertura-action@master
      with:
        path: ./coverage-report/Cobertura.xml
        minimum_coverage: 70
        fail_below_threshold: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: ./coverage-report/