// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pictyping.Infrastructure.Data;

#nullable disable

namespace Pictyping.Infrastructure.Migrations
{
    [DbContext(typeof(PictypingDbContext))]
    partial class PictypingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pictyping.Core.Entities.OmniAuthIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Provider")
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("Uid")
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_omni_auth_identities_on_user_id");

                    b.HasIndex("Provider", "Uid")
                        .IsUnique()
                        .HasDatabaseName("index_omni_auth_identities_on_provider_and_uid");

                    b.ToTable("omni_auth_identities", (string)null);
                });

            modelBuilder.Entity("Pictyping.Core.Entities.OnesideTwoPlayerTypingMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BattleDataJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("battle_data_json")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<int?>("BattleStatus")
                        .HasColumnType("integer")
                        .HasColumnName("battle_status");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("integer")
                        .HasColumnName("enemy_id");

                    b.Property<int>("EnemyStartedRating")
                        .HasColumnType("integer")
                        .HasColumnName("enemy_started_rating");

                    b.Property<int?>("FinishedRating")
                        .HasColumnType("integer")
                        .HasColumnName("finished_rating");

                    b.Property<bool>("IsFinished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_finished");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_id");

                    b.Property<int>("RegisterId")
                        .HasColumnType("integer")
                        .HasColumnName("register_id");

                    b.Property<int>("StartedRating")
                        .HasColumnType("integer")
                        .HasColumnName("started_rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId")
                        .HasDatabaseName("index_oneside_two_player_typing_matches_on_enemy_id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("index_oneside_two_player_typing_matches_on_match_id");

                    b.HasIndex("RegisterId")
                        .HasDatabaseName("index_oneside_two_player_typing_matches_on_register_id");

                    b.ToTable("oneside_two_player_typing_matches", (string)null);
                });

            modelBuilder.Entity("Pictyping.Core.Entities.PenaltyRiskAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_penalty_risk_actions_on_user_id");

                    b.ToTable("penalty_risk_actions", (string)null);
                });

            modelBuilder.Entity("Pictyping.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("admin");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("email");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("encrypted_password");

                    b.Property<bool>("Guest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("guest");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("noname")
                        .HasColumnName("name");

                    b.Property<DateTime?>("OnlineGameBanDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("online_game_ban_date");

                    b.Property<string>("PlayfabId")
                        .HasColumnType("text")
                        .HasColumnName("playfabId");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("text")
                        .HasColumnName("reset_password_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_email");

                    b.HasIndex("Rating")
                        .HasDatabaseName("index_users_on_rating");

                    b.HasIndex("ResetPasswordToken")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_reset_password_token");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Pictyping.Core.Entities.OmniAuthIdentity", b =>
                {
                    b.HasOne("Pictyping.Core.Entities.User", "User")
                        .WithMany("OmniAuthIdentities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pictyping.Core.Entities.OnesideTwoPlayerTypingMatch", b =>
                {
                    b.HasOne("Pictyping.Core.Entities.User", "EnemyUser")
                        .WithMany("TypingMatchesAsEnemy")
                        .HasForeignKey("EnemyId");

                    b.HasOne("Pictyping.Core.Entities.User", "RegisterUser")
                        .WithMany("TypingMatchesAsRegister")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnemyUser");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("Pictyping.Core.Entities.PenaltyRiskAction", b =>
                {
                    b.HasOne("Pictyping.Core.Entities.User", "User")
                        .WithMany("PenaltyRiskActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pictyping.Core.Entities.User", b =>
                {
                    b.Navigation("OmniAuthIdentities");

                    b.Navigation("PenaltyRiskActions");

                    b.Navigation("TypingMatchesAsEnemy");

                    b.Navigation("TypingMatchesAsRegister");
                });
#pragma warning restore 612, 618
        }
    }
}
